name: cmake ninja crossbuild package release
on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      cmake_version: ${{ steps.version_info.outputs.cmake_version }}
      ninja_version: ${{ steps.version_info.outputs.ninja_version }}
    strategy:
      fail-fast: false
      matrix:
        name: [cmake]
        os_id: [debian, ubuntu]
        os_codename: [stretch, buster, bullseye, bionic, focal, jammy]
        arch: [amd64, armhf, arm64]
        exclude:
          - os_id: debian
            os_codename: bionic
          - os_id: debian
            os_codename: focal
          - os_id: debian
            os_codename: jammy
          - os_id: ubuntu
            os_codename: stretch
          - os_id: ubuntu
            os_codename: buster
          - os_id: ubuntu
            os_codename: bullseye

    name: ${{ matrix.os_id }}:${{ matrix.os_codename }} ${{ matrix.name }} ${{ matrix.arch }}

    env:
      opt_dir_name: "opt/local"
      cxx_standard: "17"
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    steps:
      - name: Host - Checkout action
        uses: actions/checkout@v3

      # Fix this bug https://github.com/actions/runner-images/issues/7192
      - name: Host - phased updates
        run: echo 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates

      # Bootstrap Ubuntu Lunar repo so that we can install specific app we may need, like binfmt and qemu-user-static
      - name: Host - set up lunar repo -t lunar
        run: |
          printf '%b\n' 'Package: *\nPin: release n=lunar\nPin-Priority: 50' | sudo tee /etc/apt/preferences
          printf '%b\n' 'deb http://archive.ubuntu.com/ubuntu/ lunar main universe restricted' | sudo tee /etc/apt/sources.list.d/lunar.list

      - name: Host - update
        run: sudo apt-get update

      # - name: Host - upgrade
      #   run: sudo apt-get -y upgrade

      # No action or other method to bootstrap binfmt. Install from lunar and we get the latest versions and full docker support
      - name: Host - set up qemu-user-static binfmt-support from lunar
        run: sudo apt install -t lunar libpipeline1 qemu-user-static binfmt-support

      # Why are we doing it like this and not using a container setup? That's how you're supposed to do it, right?
      # qemu-user-static and binfmt-support are not part of the runner images https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
      # We would need to modify the runner to install these before the container starts. Which you cannot do as there is no way to bootstrap the host.
      # So we install them on the host then create/pull a custom docker image that we use to build the multiarch targets.
      # We are always on the host runner but can use any docker image we need with the access the qemu emulation when required.
      #
      # We are using these pre configured toolchain images that allows me to remove 50% of the code/time from this action.
      #
      # https://github.com/userdocs/dcb/blob/main/Dockerfile
      #
      # The image does not run as root and has password-less sudo. There are two users username:1000 /home/username and github:1001 /home/github
      # In the action it runs as 1001 /home/github and files should be available to the host. For local use, you might need -u 1000

      - name: Host - Create docker multiarch ${{ matrix.arch }} container
        run: docker run --name multiarch -it -d -u 1001 -v ${{ github.workspace }}:/home/github ghcr.io/userdocs/dcb:${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.arch }}

      - name: Host - cmake latest release set cmake_github_tag
        run: |
          cmake_github_tag="$(git ls-remote -q -t --refs https://github.com/Kitware/CMake.git | awk '{sub("refs/tags/", "");sub("(.*)-rc(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)"
          echo "cmake_github_tag=${cmake_github_tag}" >> $GITHUB_ENV

      - name: Host - Git clone cmake
        run: git clone --single-branch --branch ${{ env.cmake_github_tag }} --shallow-submodules --recurse-submodules --depth 1 https://github.com/Kitware/CMake.git cmake

      - name: Docker - Configure cmake
        run: docker exec -w /home/github/cmake multiarch ./configure --parallel=$(nproc) --no-system-libs --enable-ccache --prefix=/home/github/build/${{ env.opt_dir_name}}

      - name: Docker - Make build cmake
        run: docker exec -w /home/github/cmake multiarch make -j $(nproc)

      - name: Docker - Make install cmake
        run: docker exec -w /home/github/cmake multiarch make install

      - name: Host - ninja latest release set ninja_github_tag
        run: |
          ninja_github_tag="$(git ls-remote -q -t --refs https://github.com/ninja-build/ninja.git | awk '/v/{sub("refs/tags/", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)"
          echo "ninja_github_tag=${ninja_github_tag}" >> $GITHUB_ENV

      - name: Host - Git clone ninja
        run: git clone --single-branch --branch ${{ env.ninja_github_tag }} --shallow-submodules --recurse-submodules --depth 1 https://github.com/ninja-build/ninja.git ninja

      - name: Docker - Configure ninja
        run: |
          docker exec -w /home/github/ninja multiarch /home/github/build/${{ env.opt_dir_name }}/bin/cmake -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_INSTALL_PREFIX="/home/github/build/${{ env.opt_dir_name }}"

      - name: Docker - Build ninja
        run: docker exec -w /home/github/ninja multiarch /home/github/build/${{ env.opt_dir_name }}/bin/cmake --build build -j"$(nproc)"

      - name: Docker - Install ninja
        run: docker exec -w /home/github/ninja multiarch /home/github/build/${{ env.opt_dir_name }}/bin/cmake --install build

      - name: Docker - Get cmake and ninja version versions - ${{ matrix.arch }}
        run: |
          docker exec -w /home/github multiarch bash -c '/home/github/build/${{ env.opt_dir_name }}/bin/cmake --version 2> /dev/null | awk "NR==1{print \$3}" > cmake.version'
          docker exec -w /home/github multiarch bash -c '/home/github/build/${{ env.opt_dir_name }}/bin/ninja --version 2> /dev/null > ninja.version'

      - name: Host - Set cmake version to variable
        run: |
          cmake_version="$(<cmake.version)"
          echo "cmake_version=${cmake_version%%-*}" >> $GITHUB_ENV

      - name: Host - Set ninja version to variable
        run: |
          ninja_version="$(<ninja.version)"
          echo "ninja_version=${ninja_version%\.git}" >> $GITHUB_ENV

      - name: Host - Set deb dependencies for cmake and ninja
        run: echo "cmake-deb-deps=openssl" >> $GITHUB_ENV

      - name: Host - Create deb packages
        uses: jiro4989/build-deb-action@v2
        with:
          package: "${{ matrix.name }}"
          package_root: build
          maintainer: userdocs
          compress_type: gzip
          version: "${{ env.cmake_version }}+${{ env.ninja_version }}"
          depends: "${{ env.cmake-deb-deps }}"
          arch: "${{ matrix.arch }}"
          desc: "${{ matrix.name }}-${{ matrix.arch }} for ${{ matrix.os_id }}-${{ matrix.os_codename }}"

      - name: Host - Remove version from release name and use hyphens
        run: mv -f "${{ matrix.name }}_${{ env.cmake_version }}+${{ env.ninja_version }}_${{ matrix.arch }}.deb" "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: Info
        id: version_info
        run: |          
          echo "cmake_version=${{ env.cmake_version }}" >> $GITHUB_OUTPUT
          echo "ninja_version=${{ env.ninja_version }}" >> $GITHUB_OUTPUT

      - name: Host - upload deb packages
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}-deb"
          path: "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

  release:
    name: Upload artifacts to release
    runs-on: ubuntu-latest
    needs: build
    if: always() && contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    env:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      cmake_version: ${{ needs.build.outputs.cmake_version }}
      ninja_version: ${{ needs.build.outputs.ninja_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Host - Download artifacts
        uses: actions/download-artifact@v3

      - name: Host - artifacts organise for release
        run: |
          mkdir -p "releases"
          for files in *-deb; do
              cp -rf ${files}/* "releases/"
          done

      - name: Host - "Create release - tag - assets"
        id: release_id
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: releases/*.deb
          replacesArtifacts: true
          tag: "${{ env.cmake_version}}_${{ env.ninja_version}}"
          name: "cmake ${{ env.cmake_version}} ninja ${{ env.ninja_version}}"
          body: "cmake and ninja built from github latest release on amd64 arm64 armhf for Debian Stretch Buster Bullseye and Ubuntu Bionic Focal Jammy"
          allowUpdates: true
