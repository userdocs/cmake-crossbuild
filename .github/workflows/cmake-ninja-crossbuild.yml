name: cmake ninja crossbuild package release
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: 
      image: ${{ matrix.os_id }}:${{ matrix.os_version_id }}
      env:
        opt_dir_name: "opt/local"
        prerelease: "false"
        DEBIAN_FRONTEND: "noninteractive"
        LANG: "en_US.UTF-8"
        LANGUAGE: "en_US.UTF-8"
        LC_ALL: "en_US.UTF-8"
        LC_CTYPE: "en_US.UTF-8"
        PATH: "/opt/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        LD_LIBRARY_PATH: "/opt/local/lib:/usr/lib/${{ matrix.CHOST }}:/usr/lib:/usr/local/lib"
        CHOST: "${{ matrix.CHOST }}"
        CC: "${{ matrix.CHOST }}-gcc"
        AR: "${{ matrix.CHOST }}-ar"
        CXX: "${{ matrix.CHOST }}-g++"
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        name: [cmake]
        os_id: [debian, ubuntu]
        os_version_id: [stretch, buster, bullseye, bionic, focal, jammy]
        arch: [amd64, armhf, arm64]
        include:
          - arch: amd64
            CHOST: "x86_64-linux-gnu"
          - arch: armhf
            CHOST: "arm-linux-gnueabihf"
          - arch: arm64
            CHOST: "aarch64-linux-gnu"
        exclude:
          - os_id: debian
            os_version_id: bionic
          - os_id: debian
            os_version_id: focal
          - os_id: debian
            os_version_id: jammy
          - os_id: ubuntu
            os_version_id: stretch
          - os_id: ubuntu
            os_version_id: buster
          - os_id: ubuntu
            os_version_id: bullseye

    name: ${{ matrix.os_id }}:${{ matrix.os_version_id }} ${{ matrix.name }} ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v3
        
      - run: apt-get update
      - run: apt-get -y upgrade
      - run: apt-get install -y build-essential cmake curl pkg-config automake libtool git perl python3 python3-dev unzip ccache openssl jq locales locales-all

      - name: Host - Install qemu-static and binfmt-support from lunar ${{ github.event.inputs.distinct_id }}
        run: |
          if [[ "${{ matrix.os_id }}" == "debian" ]]; then
              qemuuserstatic="$(curl -sL 'https://sources.debian.org/api/src/qemu/' | jq -r '.versions[0].version')"
              binfmtsupport="$(curl -sL 'https://sources.debian.org/api/src/binfmt-support/' | jq -r '.versions[0].version')"
              qemuuserstatic_url="http://ftp.nl.debian.org/debian/pool/main/q/qemu/qemu-user-static_${qemuuserstatic}_amd64.deb"
              binfmtsupport_url="http://ftp.nl.debian.org/debian/pool/main/b/binfmt-support/binfmt-support_${binfmtsupport}_amd64.deb"
          fi

          if [[ "${{ matrix.os_id }}" == "ubuntu" ]]; then
              qemuuserstatic="$(curl -sL 'https://api.launchpad.net/1.0/ubuntu/+archive/primary?ws.op=getPublishedSources&pocket=Release&source_name=qemu&exact_match=true' | jq -r '.entries[0].source_package_version')"
              binfmtsupport="$(curl -sL 'https://api.launchpad.net/1.0/ubuntu/+archive/primary?ws.op=getPublishedSources&pocket=Release&source_name=binfmt-support&exact_match=true' | jq -r '.entries[0].source_package_version')"
              qemuuserstatic_url="http://nl.archive.ubuntu.com/ubuntu/pool/universe/q/qemu/qemu-user-static_${qemuuserstatic#*:}_amd64.deb"
              binfmtsupport_url="http://nl.archive.ubuntu.com/ubuntu/pool/universe/b/binfmt-support/binfmt-support_${binfmtsupport}_amd64.deb"
          fi
          curl -sLo qemuuserstatic.deb "${qemuuserstatic_url}"
          curl -sLo binfmtsupport.deb "${binfmtsupport_url}"

      - name: Docker target - fix Ubuntu sources
        if: |
          matrix.os_id == 'ubuntu' && matrix.arch != 'amd64'
        run: |
          echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.os_version_id }} main restricted universe multiverse" > /etc/apt/sources.list
          echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.os_version_id }}-updates main restricted universe multiverse" >> /etc/apt/sources.list
          echo "deb [arch=${{ matrix.arch }}] http://ports.ubuntu.com/ubuntu-ports ${{ matrix.os_version_id }}-security main restricted universe multiverse" >> /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }} main restricted universe multiverse" >> /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }}-updates main restricted universe multiverse" >> /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }}-backports restricted universe multiverse" >> /etc/apt/sources.list
          echo "deb [arch=amd64] http://security.ubuntu.com/ubuntu/ ${{ matrix.os_version_id }}-security main restricted universe multiverse" >> /etc/apt/sources.list

      - name: Docker target - dpkg configure arch
        run: dpkg --add-architecture ${{ matrix.arch }}

      - name: update
        run: apt-get update

      - name: Docker target - apt-get install crossbuild-essential
        if: matrix.arch != 'amd64'
        run: apt-get install -y crossbuild-essential-${{ matrix.arch }}

      - name: Docker target - apt-get install cross target deps
        run: |
          apt-get install -y libssl-dev:${{ matrix.arch }} re2c:${{ matrix.arch }} libstdc++-*-dev:${{ matrix.arch }} 
          apt-get install -y libarchive-dev:${{ matrix.arch }} libcurl4-openssl-dev:${{ matrix.arch }} libuv1-dev:${{ matrix.arch }} procps:${{ matrix.arch }} zlib1g-dev:${{ matrix.arch }}
          apt-get install -y libexpat1-dev:${{ matrix.arch }} libjsoncpp-dev:${{ matrix.arch }} libncurses5-dev:${{ matrix.arch }} librhash-dev:${{ matrix.arch }}

      - name: Docker target - bionic - apt-get install gcc-8-base g++-8
        if: matrix.arch == 'amd64' && matrix.os_version_id == 'bionic'
        run: apt-get install -y gcc-8 g++-8

      - name: Docker target - bionic - apt-get install gcc-8 g++-8 cross
        if: matrix.arch != 'amd64' && matrix.os_version_id == 'bionic'
        run: apt-get install -y cpp-8-${{ matrix.CHOST }} g++-8-${{ matrix.CHOST }} gcc-8-${{ matrix.CHOST }}

      - name: Docker target - bionic - reconfigure build vars
        if: matrix.os_version_id == 'bionic'
        run: |
          echo "CC=${{ matrix.CHOST }}-gcc-8" >> $GITHUB_ENV
          echo "AR=${{ matrix.CHOST }}-gcc-ar-8" >> $GITHUB_ENV
          echo "CXX=${{ matrix.CHOST }}-g++-8" >> $GITHUB_ENV

      - name: Docker target - cmake latest release set cmake_github_tag
        run: |
          cmake_github_tag="$(git ls-remote -q -t --refs https://github.com/Kitware/CMake.git | awk '{sub("refs/tags/", "");sub("(.*)-rc(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)"
          echo "cmake_github_tag=${cmake_github_tag}" >> $GITHUB_ENV

      - name: Docker target - Git clone cmake
        run: git clone --single-branch --branch ${{ env.cmake_github_tag }} --shallow-submodules --recurse-submodules --depth 1 https://github.com/Kitware/CMake.git ~/cmake

      - name: Docker target - Configure cmake
        run: |
          cd ~/cmake
          cmake -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_INSTALL_PREFIX=~/build/${opt_dir_name}

      - name: Execute if the job failed
        if: ${{ failure() }}
        run: cat cmake/Bootstrap.cmk/cmake_bootstrap.log

      - name: Docker target - Make build cmake
        run: |
          cd ~/cmake
          cmake --build build -j "$(nproc)"

      - name: Docker target - Make install cmake
        run: |
          cd ~/cmake
          cmake --install build

      - name: Docker target - ninja latest release set ninja_github_tag
        run: |
          ninja_github_tag="$(git ls-remote -q -t --refs https://github.com/ninja-build/ninja.git | awk '/v/{sub("refs/tags/", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)"
          echo "ninja_github_tag=${ninja_github_tag}" >> $GITHUB_ENV

      - name: Docker target - Git clone ninja
        run: git clone --single-branch --branch ${{ env.ninja_github_tag }} --shallow-submodules --recurse-submodules --depth 1 https://github.com/ninja-build/ninja.git ~/ninja

      - name: Docker target - Configure ninja
        run: |
          cd ~/ninja
          build/${opt_dir_name}/bin/cmake -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_INSTALL_PREFIX=~/build/${opt_dir_name}

      - name: Docker target - Build ninja
        run: |
          cd ~/ninja
          build/${opt_dir_name}/bin/cmake --build build -j "$(nproc)"

      - name: Docker target - Install ninja
        run: |
          cd ~/ninja
          build/${opt_dir_name}/bin/cmake --install build

      - name: Docker target - Get cmake and ninja version versions - ${{ matrix.arch }}
        run: |
          build/${opt_dir_name}/bin/cmake --version 2> /dev/null | awk "NR==1{print \$3}" > cmake.version
          build/${opt_dir_name}/bin/ninja --version 2> /dev/null > ninja.version

      - name: Host - Set cmake version to variable
        run: |
          cmake_version="$(<cmake.version)"
          echo "cmake_version=${cmake_version%%-*}" >> $GITHUB_ENV

      - name: Host - Set ninja version to variable
        run: |
          ninja_version="$(<ninja.version)"
          echo "ninja_version=${ninja_version%\.git}" >> $GITHUB_ENV

      - name: Host - Set deb dependencies for cmake and ninja
        run: echo "cmake-deb-deps=openssl" >> $GITHUB_ENV

      - name: Host - Create deb packages
        uses: jiro4989/build-deb-action@v2
        with:
          package: "${{ matrix.name }}"
          package_root: build
          maintainer: userdocs
          compress_type: gzip
          version: "${{ env.cmake_version }}+${{ env.ninja_version }}"
          depends: "${{ env.cmake-deb-deps }}"
          arch: "${{ matrix.arch }}"
          desc: "${{ matrix.name }}-${{ matrix.arch }} for ${{ matrix.os_id }}-${{ matrix.os_version_id }}"

      - name: Host - Remove version from release name and use hyphens
        run: mv -f "${{ matrix.name }}_${{ env.cmake_version }}+${{ env.ninja_version }}_${{ matrix.arch }}.deb" "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: Host - "Create release - tag - assets"
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ env.prerelease }}
          artifacts: "${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.name }}-${{ matrix.arch }}.deb"
          replacesArtifacts: true
          tag: "${{ env.cmake_version }}_${{ env.ninja_version }}"
          name: "cmake ${{ env.cmake_version }} ninja ${{ env.ninja_version }}"
          body: "cmake and ninja built from github latest release on amd64 arm64 armhf for Debian Stretch Buster Bullseye and Ubuntu Bionic Focal Jammy"
          allowUpdates: true
          token: "${{ secrets.GITHUB_TOKEN }}"