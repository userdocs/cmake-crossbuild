name: cmake ninja crossbuild package release new
on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [cmake]
        os_id: [debian, ubuntu]
        os_codename: [stretch, buster, bullseye, bionic, focal, jammy]
        arch: [amd64, armhf, arm64]
        exclude:
          - os_id: debian
            os_codename: bionic
          - os_id: debian
            os_codename: focal
          - os_id: debian
            os_codename: jammy
          - os_id: ubuntu
            os_codename: stretch
          - os_id: ubuntu
            os_codename: buster
          - os_id: ubuntu
            os_codename: bullseye

    name: ${{ matrix.os_id }}:${{ matrix.os_codename }} ${{ matrix.name }} ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v3

      # - name: Host - phased updates # https://github.com/actions/runner-images/issues/7192
      #   run: echo 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates

      # - name: Host - update
      #   run: sudo apt-get update

      # - name: Host - upgrade
      #   run: sudo apt-get -y upgrade

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Host - Create docker multiarch ${{ matrix.arch }} container
        run: docker run --name multiarch -it -d -w /root -v ${{ github.workspace }}:/root ghcr.io/userdocs/dcb:${{ matrix.os_id }}-${{ matrix.os_version_id }}-${{ matrix.arch }}

      - name: cmake latest release set cmake_github_tag
        run: |
          cmake_github_tag="$(git ls-remote -q -t --refs https://github.com/Kitware/CMake.git | awk '{sub("refs/tags/", "");sub("(.*)-rc(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)"
          echo "cmake_github_tag=${cmake_github_tag}" >> $GITHUB_ENV

      - name: Git clone cmake
        run: git clone --single-branch --branch ${{ env.cmake_github_tag }} --shallow-submodules --recurse-submodules --depth 1 https://github.com/Kitware/CMake.git cmake

      - name: Configure cmake
        run: docker exec -w /root/cmake multiarch ./bootstrap --parallel=$(nproc) --no-system-libs --enable-ccache --prefix=/root/build

      - name: Execute if the job failed
        if: ${{ failure() }}
        run: cat /root/cmake/Bootstrap.cmk/cmake_bootstrap.log

      - name: Make build cmake
        run: docker exec -w /root/cmake multiarch && make -j $(nproc)

      - name: Make install cmake
        run: docker exec -w /root/cmake multiarch && make install

      - name: ninja latest release set ninja_github_tag
        run: |
          ninja_github_tag="$(git ls-remote -q -t --refs https://github.com/ninja-build/ninja.git | awk '/v/{sub("refs/tags/", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)"
          echo "ninja_github_tag=${ninja_github_tag}" >> $GITHUB_ENV

      - name: Git clone ninja
        run: git clone --single-branch --branch ${{ env.ninja_github_tag }} --shallow-submodules --recurse-submodules --depth 1 https://github.com/ninja-build/ninja.git ninja

      - name: Configure ninja
        run: |
          docker exec -w /root/ninja multiarch /root/build/bin/cmake -B build \
          -D CMAKE_BUILD_TYPE="release" \
          -D CMAKE_INSTALL_PREFIX="/root/build"

      - name: Build ninja
        run: docker exec -w /root/ninja multiarch /root/build/bin/cmake --build build -j"$(nproc)"

      - name: Install ninja
        run: docker exec -w /root/ninja multiarch /root/build/bin/cmake --install build

      - name: Chown
        run: sudo chown -R $(id) build

      - name: Get cmake and ninja version versions - ${{ matrix.arch }}
        run: |
          build/bin/cmake --version 2> /dev/null | awk "NR==1{print \$3}" > cmake.version
          build/bin/ninja --version 2> /dev/null > ninja.version

      - name: Host - Set cmake version to variable
        run: |
          cmake_version="$(<cmake.version)"
          echo "cmake_version=${cmake_version%%-*}" >> $GITHUB_ENV

      - name: Host - Set ninja version to variable
        run: |
          ninja_version="$(<ninja.version)"
          echo "ninja_version=${ninja_version%\.git}" >> $GITHUB_ENV

      - name: Host - Set deb dependencies for cmake and ninja
        run: echo "cmake-deb-deps=openssl" >> $GITHUB_ENV

      - name: Host - Create deb packages
        uses: jiro4989/build-deb-action@v2
        with:
          package: "${{ matrix.name }}"
          package_root: build
          maintainer: userdocs
          compress_type: gzip
          version: "${{ env.cmake_version }}+${{ env.ninja_version }}"
          depends: "${{ env.cmake-deb-deps }}"
          arch: "${{ matrix.arch }}"
          desc: "${{ matrix.name }}-${{ matrix.arch }} for ${{ matrix.os_id }}-${{ matrix.os_codename }}"

      - name: Host - Remove version from release name and use hyphens
        run: mv -f "${{ matrix.name }}_${{ env.cmake_version }}+${{ env.ninja_version }}_${{ matrix.arch }}.deb" "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"

      - name: Host - "Create release - tag - assets"
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ env.prerelease }}
          artifacts: "${{ matrix.os_id }}-${{ matrix.os_codename }}-${{ matrix.name }}-${{ matrix.arch }}.deb"
          replacesArtifacts: true
          tag: "${{ env.cmake_version }}_${{ env.ninja_version }}"
          name: "cmake ${{ env.cmake_version }} ninja ${{ env.ninja_version }}"
          body: "cmake and ninja built from github latest release on amd64 arm64 armhf for Debian Stretch Buster Bullseye and Ubuntu Bionic Focal Jammy"
          allowUpdates: true
          token: "${{ secrets.GITHUB_TOKEN }}"
